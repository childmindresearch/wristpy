{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Command Line Tutorial \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Default Pipeline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Running a single file.\n",
    "The simplest way to run wristpy is to open up an instance of your command line terminal of choice, and entering a valid file path for the first positional argument, and an output path (-o) that ends in the name you want to give your save file. Valid save formats are .csv and .parquet."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!wristpy tutorial_data/three_nights.bin -o ../build/three_nights_single_file_cli.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Running a Directory\n",
    "To run an entire directory, use the path to the directory as the input. For the output, specify a path to dump the files in. Unlike in the first example, when running a directory, the output file names will be determined by the input file names. The user can use the -O flag to specify the output file type (default: .csv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K\u001b[32m⠸\u001b[0m \u001b[36mProcessing files in tutorial_data...\u001b[0m \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m  0%\u001b[0m2025-10-08 17:04:41,144 - wristpy - INFO - writers.py:79 - save_results - Results saved in: ../build/three_nights.csv\n",
      "2025-10-08 17:04:41,164 - wristpy - INFO - orchestrator.py:466 - _run_file - Processing for three_nights completed successfully.\n",
      "\u001b[2K  \u001b[36mProcessing files in tutorial_data...\u001b[0m \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m\n",
      "\u001b[?25h2025-10-08 17:04:41,168 - wristpy - INFO - orchestrator.py:263 - _run_directory - Processing for directory tutorial_data completed successfully.\n"
     ]
    }
   ],
   "source": [
    "!wristpy tutorial_data/ -o ../build/ -O .csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Customizing your pipeline\n",
    "Wristpy allows for a number of arguments allowing you to customize your pipeline."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Specify a calibrator\n",
    "The default calibrator ('gradient') is a modified version of the original GGIR implementation. The GGIR implementation can be specified using the 'ggir' argument.\n",
    "See the following links for information on each calibration method: [`gradient`](https://childmindresearch.github.io/wristpy/api/wristpy.processing.calibration.html#wristpy.processing.calibration.ConstrainedMinimizationCalibration) and [`ggir`](https://childmindresearch.github.io/wristpy/api/wristpy.processing.calibration.html#wristpy.processing.calibration.GgirCalibration)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!wristpy tutorial_data/three_nights.bin -o ../build/three_nights_single_file_cli.csv -c gradient"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Epoch Length\n",
    "By default, epochs are set to 5 seconds, but the -e flag can be used to specify the desired epoch in seconds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!wristpy tutorial_data/three_nights.bin -o ../build/three_nights_single_file_cli.csv -c gradient -e 10 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Choose an activity metric.\n",
    "There are four different measures of physical activity that wristpy can generate from accelerometer data. The user can specify some or all of the available metrics to be generated in the report. If no option is given, the Euclidean Norm Minus One is used by default. The available metrics are enmo, mims, mad, and ag_count.  See [`here`](https://childmindresearch.github.io/wristpy/getting_started.html#physical-activity-metrics-explained) for details on each metric. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!wristpy tutorial_data/three_nights.bin -o ../build/three_nights_single_file_cli.csv -c gradient -e 10 -a enmo -a mad "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Physical activity levels \n",
    "To specify your own activity thresholds, enter them in the same order as the corresponding metric. Make sure the values are triplets, contained within strings and separated with a space. In the following example, the threshold values for enmo would be 1, 2, 3 and the threshold values for mad would be 1.5, 2.5, 3.5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!wristpy tutorial_data/three_nights.bin -o ../build/three_nights_single_file_cli.csv -a enmo -a mad -t \"1 2 3\" -t \"1.5 2.5 3.5\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To see all available options run:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!wristpy --help"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
